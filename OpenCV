This folder contains OpenCV-related code for the project.

# OpenCV Module

This folder contains the native C++ and OpenCV logic used for real-time processing.

## Functionality
- Converts incoming frames from Android (via JNI).
- Performs face detection and attention/emotion analysis.
- Computes engagement metrics (e.g., eye movement, facial expressions).

## Tech Stack
- Language: C++ (OpenCV)
- Framework: NDK + JNI
- Models: Haar Cascade or DNN-based facial emotion recognition

## Example Code (Concept)
```cpp
cv::Mat processFrame(cv::Mat &frame) {
    cv::Mat gray;
    cv::cvtColor(frame, gray, cv::COLOR_BGR2GRAY);
    // Perform face detection or emotion recognition here
    return gray;
}
yaml
Copy code

Add and commit with:  
> **“Added OpenCV module documentation and sample code”**

---

## ✅ Step 4 – Prepare Web Section

In your **Web** folder, add:

**`Web/README.md`**

```markdown
# Web Module

This folder contains the frontend (TypeScript/React) interface for displaying student analytics and recommendations.

## Features
- Dashboard for attention/emotion metrics.
- API to fetch processed data from the backend.
- Charts showing learning pattern and performance insights.

## Tech Stack
- TypeScript / React (frontend)
- Express / Flask (optional backend API)
- Chart.js or Recharts for visualization

## Example Flow
1. Backend sends metrics via JSON.
2. Frontend displays them using charts.
3. Recommendations update based on student behavior

